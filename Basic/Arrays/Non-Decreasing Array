Problem-

For a given array, write a solution to check if it could become non-decreasing by modifying at most 1 element.
Hint: [ non-decreasing - increasing or equal to elements ]

Examples-
Input: 3
       8 4 6
Output: true

Input: 6
       -2 7 -1 0 1 2
Output: true

Input: 4 
       3 4 2 3
Output: false

There are 2 approaches to solve. Mentioned below:
-----------------------------------------------------------------------------------------------------------------

Naive Approach - (Time - O(n^2), Space - O(1))

Intution - As we are allowed at most one modification, we can try it on every index separately and naively check whether the array becomes non-decreasing by any modification. For this, we can modify the starting index (i.e. 0) to a very less value (say INT_MIN) and the rest of the indexes as the value of the preceding element if present (i.e. ARR[i] = ARR[i - 1]). 

public class Solution {
	public static boolean isNonDecreasing(int arr[], int n) {
		for (int i = 0; i < n - 1; i++) {
			if (arr[i] > arr[i + 1]) {
				return false;
			}
		}

		return true;
	}

	public static boolean isPossible(int[] arr, int n) {
		for (int i = 0; i < n; i++) {
			int oldVal = arr[i];

			if (i > 0) {
				arr[i] = arr[i - 1];
			} 
			
			else {
				arr[i] = Integer.MIN_VALUE;
			}

			if (isNonDecreasing(arr, n)) {
				return true;
			}

			arr[i] = oldVal;
		}

		return false;

	}

}
----------------------------------------------------------------------------------------------------------------

Optimal Approach - (Time - O(n), Space - O(1))

Intution - Best explained in the copy.

import java.util.* ;
import java.io.*; 
public class Solution {
	public static boolean isPossible(int[] arr, int n) {
		// Write your code here.
		int flag = 0;
		for(int i = 1; i < n; i++)
			if(arr[i-1] > arr[i])
			if(flag++ > 0 || i > 1 && i < n - 1 && arr[i-2] > arr[i] && arr[i+1] < arr[i-1])
				return false;
			
			return true;
	}
}
