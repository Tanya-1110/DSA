Problem- 

Find second largest element in the array of size n.
Conditions- duplicate elements are allowed and if no such element is present then return -1.

Example: 
Input: 2, 4, 5, 6, 8
Output: 6

Input: 7, 8, 8, 1, 4, 3
Output: 7

Input: 10, 10, 10, 10, 10
Output: -1

There are 2 approaches to solve. Mentioned below:
---------------------------------------------------------------------------------------------------------------

NAIVE APPROACH (Time - O(nlogn), Space - O(1))

Intution - Sort the array and traverse the array from end, iterate over the loop till the values are same and print the non-duplicant second largest value.

import java.util.* ;
import java.io.*; 
public class Solution {
	public static int findSecondLargest(int n, int[] arr) {
		// Write your code here.

		   Arrays.sort(arr);
		   for(int i = arr.length - 1; i >= 1; i--){
			   if(arr[i] == arr[i-1]){
				   continue;
				 }
			   else 
				   return arr[i-1];
		   }
			 return -1;
	}
}
--------------------------------------------------------------------------------------------------------------

OPTIMAL APPROACH (Time - O(n), Space - O(1))

Intution - Maintain 2 variables in 2 domains if the value is larger than largest then shift secondlargest to largest and largest to this value. And if value is between the largest and second largest (value < largest but Value > secondLargest) then set secondLargest to this value but largest should not match with this value. 
public class Solution {
	public static int findSecondLargest(int n, int[] arr) {

		int largest = Integer.MIN_VALUE, secondLargest = Integer.MIN_VALUE;

		for (int i = 0; i < n; i++) {

			// Find largest and second largest element simultaneously.
			if (arr[i] > largest) {
				secondLargest = largest;
				largest = arr[i];
			}

			// If an element is smaller than largest and larger than second largest.
			else if (arr[i] > secondLargest && arr[i] != largest) {
				secondLargest = arr[i];
			}
		}

		if (secondLargest != Integer.MIN_VALUE) {
			return secondLargest;
		} else {
			return -1;
		}
	}
}
