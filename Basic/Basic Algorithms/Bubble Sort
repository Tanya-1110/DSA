Problem - 
You have been given an unsorted array. Your task is to sort it in the ascending order.

Example -
Input: 5
5 3 7 2 1
Output: 1 2 3 5 7

There is 1 approach to solve. Mentioned below.
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Optimal Approach - (Time - O(n^2), Space - O(1))

Intution - We are settling down the heaviest element at the end of the array and next while iterating we are decreasing the condition by i and ith element from the last is sorted.

import java.util.* ;
import java.io.*; 

public class Solution {
    
    public static void bubbleSort(int[] arr, int n) {   

        // loop to access each array element
        for(int i = 0; i < n - 1; i++){

            // loop to compare array elements
            for(int j = 0; j < n - 1 - i; j++){

                // compare two adjacent elements
                // change > to < to sort in descending order
                if(arr[j] > arr[j+1]){

                    // swapping occurs if elements are not in the intended order

                    int temp = arr[j];
                    arr[j] = arr[j + 1];
                    arr[j + 1] = temp;
                }
            }
        }
    }
}

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Optimized Bubble Sort Algorithm

// Optimized Bubble sort in Java

import java.util.Arrays;

class Main {

  // perform the bubble sort
  static void bubbleSort(int array[]) {
    int size = array.length;
    
    // loop to access each array element
    for (int i = 0; i < (size-1); i++) {
    
      // check if swapping occurs
      boolean swapped = false;
      
      // loop to compare adjacent elements
      for (int j = 0; j < (size-i-1); j++) {

        // compare two array elements
        // change > to < to sort in descending order
        if (array[j] > array[j + 1]) {

          // swapping occurs if elements
          // are not in the intended order
          int temp = array[j];
          array[j] = array[j + 1];
          array[j + 1] = temp;
          
          swapped = true;
        }
      }
      // no swapping means the array is already sorted
      // so no need for further comparison
      if (!swapped)
        break;

    }
  }
}
