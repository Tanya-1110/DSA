Problem -
Your task is to find majority element in the given array of size 'N'. If there is no majority element present, return -1.

A majority element is an element that occurs more than floor('N'/ 2) times in the array.

Example - 
Input: 5
2 3 9 2 2
Output: 2

Input: 4
2 2 3 3
Output: -1

There are 4 approaches to solve. Mentioned below.
------------------------------------------------------------------------------------------------------------------------------------------------------------------
NAIVE APPROACH
Time - O(N^2)
Space - O(1)

Intution - The basic idea is to traverse the array and count the frequency of each element. 
           We will run two nested loops till ‘N’ and store the count of each array element in ‘maxCount’. If for any element, ‘maxCount' becomes greater than ‘N’ / 2, we 
           will return that element as the majority element. 
If no majority element is found, we will return -1.

public class Solution{
	public static int findMajority(int[] arr, int n) {
		// Iterating each element in the array/list and check if it is a majority element.
		for (int i = 0; i < n; i++) {
			// Variable to store the frequency of the current element at index 'i'.
			int maxCount = 0;

			// Iterating the array/list to count the frequency of the current element at index 'i'.
			for (int j = 0; j < n; j++) {
				// Increment the count of variable if an occurrence of the current element is observed.
				if (arr[j] == arr[i]) {
					maxCount++;
				}
			}

			// If count of any element exceeds 'n' / 2, then it is the majority element.
			if (maxCount > n / 2) {
				return arr[i];
			}
		}

		// If no majority element found, return -1.
		return -1;
	}
}
------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Sorting Approach 
Time - O(NlogN)
Space - O(1)

Intution - The intuition behind this approach is that if an element occurs more than n/2 times in the array (where n is the size of the array), it will always occupy the 
           middle position when the array is sorted. Therefore, we can sort the array and return the element at index n/2.

class Solution {
    public int majorityElement(int[] nums) {
        Arrays.sort(nums);
        int n = nums.length;
        return nums[n/2];
    }
}
--------------------------------------------------------------------------------------------------------------------------------------------------------------------
HASHMAP APPROACH 
Time - O(N)
Space - O(N)

Intution - We will maintain a hashmap to store element-frequency pairs. We will traverse the array and store the frequency of each element in the hashmap. 
           If the frequency of any element becomes greater than the floor(N/2), we will return it as the majority element. 
If no majority element is found, we will return -1.

import java.io.*;

import java.util.* ;
public class Solution {

    public static int findMajority(int[] arr, int n) {

        int maj = (int)Math.floor(n/2);

        HashMap<Integer,Integer> map = new HashMap<>();

        for(int i: arr){
            map.put(i,map.getOrDefault(i,0)+1);
        }

        for(int i : map.keySet()){
            if(map.get(i) > maj){
                return i;
            }
        }
        return -1;
    }
}
------------------------------------------------------------------------------------------------------------------------------------------------------------------------
OPTIMAL APPROACH - MOORE'S VOTING ALGORITHM
Time - O(N)
Space - O(1)

Intution - Explained in copy.

public class Solution {

	public static int findMajority(int[] arr, int n) {
		// Variable to store the majority element in the array, it it is present.
		int majorityElement = -1;
		int count = 0;

		// Iterating the array to know if there is a possible majority element present.
		for (int i = 0; i < n; i++) {
			// If count becomes 0, set current element as a possible candidate for majority element, reset count to 1.
			if (count == 0) {
				majorityElement = arr[i];
				count = 1;
			}

			// Increment the count if the current element of the array is equal to the current majority element, else decrement it.
			else if (arr[i] == majorityElement) {
				count++;
			} else {
				count--;
			}
		}

		count = 0;

		// Checking if majority element occurs more than 'n' / 2 times.
		for (int i = 0; i < n; i++) {
			if (arr[i] == majorityElement) {
				count++;
			}
		}

		// If the count of the majority element is greater than 'n' / 2, then return it.
		if (count > n / 2) {
			return majorityElement;
		}

		// If no majority element found, return -1.
		return -1;
	}
}
