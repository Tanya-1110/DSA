Problem -
An array consists of positive and negative integers. Find the length of the longest subarray whose sum is zero.

Example -
Input: 5
1 3 -1 4 -4
Output: 2 

Input: 4
1 2 1 -2
Output: 0

There are 2 approaches to solve. Mentioned below.
-----------------------------------------------------------------------------------------------------------
Approach - 1 (Time - O(n^2), Space - O(1))

Intution - We will create the various sub-arrays possible from the given array. We will then eliminate those sub-arrays whose sum is not zero. Out of the remaining 
           sub-arrays, we check the length of each sub-array and see which has the largest length. We will return the largest length as our final answer.

import java.util.ArrayList;

public class Solution {

	public static int LongestSubsetWithZeroSum(ArrayList<Integer> arr) {

		// Initialize result
		int maxLen = 0;
		int n = arr.size();

		// Pick a starting point
		for (int i = 0; i < n; i++) {

			// Initialize currSum for every starting point
			int currSum = 0;

			// Try all subarrays starting with 'i'
			for (int j = i; j < n; j++) {
				currSum += arr.get(j);

				// If currSum becomes 0,then update maxLen if required

				if (currSum == 0)
					maxLen = Math.max(maxLen, j - i + 1);
			}
		}
		return maxLen;
	}
}
--------------------------------------------------------------------------------------------------------------------------------------------------------------
HashMap Approach (Can be more Optimal) - 2 (Time - O(n), Space - O(n))

Intution - We can maintain a prefix sum for each index. We can check if standing at a particular index sum is zero. If it is zero, then we store the index value as the 
           length of the sub-array. Then we hold the sum values in a hash map. If the present sum is previously present in the hash map, then it means starting from the 
           previous index till the current index, we get another sub-array whose sum is zero. If the length of this sub-array is greater than the previously stored length, 
           then we modify our answer with this value. 
 The steps are as follows:

We initialize ‘maxLen’  to store the length of the maximum subset whose sum is zero, ‘sum’ to store the present sum, and hashmap ‘presum’ to keep the previous sums.
We will iterate over all the elements of the array, i.e., i = 0 to i = N - 1:
We will store the sum of the elements till index i in ‘sum’.
If ‘sum’ is zero, then we will store i + 1 in maxLen.
If arr[i] is zero and maxLen is zero, then we will store 1 in maxLen.
If ‘sum’ is not present in presum, we will store the maximum of ‘maxLen’ and i - presum[sum] in ‘maxLen’.
We will store i in presum[sum].
We will return ‘maxLen’ as the final answer.


import java.util.ArrayList;
import java.util.HashMap;

public class Solution {

	public static int LongestSubsetWithZeroSum(ArrayList<Integer> arr) {

		// Map to store the previous sums
		HashMap<Integer, Integer> presum = new HashMap<Integer, Integer>();

		int sum = 0; // Initialize the sum of elements
		int maxLen = 0; // Initialize result
		int n = arr.size();
		// Traverse through the given array
		for (int i = 0; i < n; i++) {
			// Add current element to sum
			sum += arr.get(i);

			if (arr.get(i) == 0 && maxLen == 0)
				maxLen = 1;
			if (sum == 0)
				maxLen = i + 1;

			// Look for this sum in Hash table
			if (presum.containsKey(sum)) {
				// If this sum is seen before, then update maxLen
				maxLen = Math.max(maxLen, i - presum.get(sum));
			} else {
				// Else insert this sum with index in hash table
				presum.put(sum, i);
			}
		}

		return maxLen;
	}
}
