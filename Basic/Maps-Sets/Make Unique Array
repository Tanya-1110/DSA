Problem - 
For a given array of size n, find the minimum number of element should be removed to make the array unique which has all distinct elements.

Example - 

Input: 4
4
1 2 1 2
5
1 2 3 1 2
4
1 1 1 1
5
3 6 7 12 13

Output: 
2
2
3
0

There are 2 approaches(Both with same time and space complexity). Mentioned below.
-------------------------------------------------------------------------------------------------------------------

Approach - (Time - O(n), Space - O(n))

HASHMAP

Intution - We have created a hashmap, which stores the element if it is found for the first time and updates key with 1 value but if the element already exists then increase
           the count that represents the elements to be removed to make the array unique.

import java.util.ArrayList;
import java.util.HashMap;

public class Solution {

	public static int minElementsToRemove(ArrayList<Integer> arr) {

		int n = arr.size();

		HashMap<Integer, Integer> present = new HashMap<>();
		int minRemoves = 0;

		for (int i = 0; i < n; i++) {

			// If the current element is present in array.
			if (present.containsKey(arr.get(i))) {
				// Increase the number of removes.
				minRemoves++;
			} else {
				// Else recoganize that element is present.
				present.put(arr.get(i), 1);
			}
		}

		return minRemoves;
	}
}
-----------------------------------------------------------------------------------------------------------------
Time - O(n), Space - (n)
In worst case, all elements will be distinct, so hashset will be filled completely.
HASHSET 

Intution - Hashset is used as it only stores unique elements. We have created HashSet of size of the array, so after filling unique elements, left over space in hashset is the answer.

import java.util.* ;
import java.io.*; 
public class Solution {

	public static int minElementsToRemove(ArrayList<Integer> arr) {

        int n = arr.size();

		HashSet<Integer> set = new HashSet<>();

		for(int i = 0; i < n; i++){
			set.add(arr.get(i));
		}

		return n - set.size();
	}
}
