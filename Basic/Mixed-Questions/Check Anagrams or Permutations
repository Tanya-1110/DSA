Problem -
You are given 2 strings, you have to return true if both are equal and false if they are not equal.

Two strings are said to be anagram, if they contain same characters irrespective of their order of occurences in both of the string.

Example -
Input: listen silent
Output: true

Input: triangle integral
Output: true

Input: hearts earth
Output: false

There are 2 approaches to solve. Mentioned below.
-------------------------------------------------------------------------------------------------------------------------------------------------
Sorting Approach (naive approach)  - (Time - O(nlogn), Space - O(1))

Intution - Sort the 2 char arrays and check if they are anagrams by using Arrays.equals function which compares array elements by traversal so it takes o(n) time complexity and sorting takes O(nlogn) time complexity = O(n) + O(nlogn) = O(nlogn).

import java.util.Arrays;

public class Solution {
	public static boolean areAnagram(String str1, String str2) {

		int n1 = str1.length();
		int n2 = str2.length();

		if (n1 != n2) {
			return false;
		}

		// Convert input string to char array.
		char[] arr1 = str1.toCharArray();
		char[] arr = str2.toCharArray();

		Arrays.sort(arr1);
		Arrays.sort(arr2);

		// Compare sorted strings. 
// or use return Arrays.equals(arr1, arr2); instead of this for loop it directly returns true or false to the answer.
		for (int i = 0; i < n1; i++) {
			if (arr1[i] != arr2[i]) {
				return false;
			}
		}
		return true;
	}
}
--------------------------------------------------------------------------------------------------------------------------------------------
Optimal Approach (HASHING) - (Time - O(n), Space - O(n))

Intution - Explained in copy. Frequencies other than 0 results answer as false.

  class Solution {
    public boolean isAnagram(String s, String t) {
        Map<Character, Integer> count = new HashMap<>();
        
        // Count the frequency of characters in string s
        for (char x : s.toCharArray()) {
            count.put(x, count.getOrDefault(x, 0) + 1);
        }
        
        // Decrement the frequency of characters in string t
        for (char x : t.toCharArray()) {
            count.put(x, count.getOrDefault(x, 0) - 1);
        }
        
        // Check if any character has non-zero frequency
        for (int val : count.values()) {
            if (val != 0) {
                return false;
            }
        }
        return true;
    }
}
