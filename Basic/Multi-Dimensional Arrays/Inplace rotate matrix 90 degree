Problem - 
Rotate a square matrix by 90 degrees in anti-clockwise direction without using extra space but by performing inplace.

Example _

Input: 4
1  2  3  4 
5  6  7  8 
9 10 11 12 
13 14 15 16

Output: 
4  8 12 16 
3  7 11 15 
2  6 10 14 
1  5  9 13
------------------------------------------------------------------------------------------------------------------------

Optimal Approach - (Time - O(n^2), Space - O(1))

Approach is to first perform transpose then reverse of the columns across their central rows.

import java.util.* ;
import java.io.*; 
public class Solution {
	
	public static void inplaceRotate(int[][] arr, int n) {
		// Write your code here.

// transpose 
		for(int i = 0; i < n; i++){
			for(int j = i; j < n; j++){
				int temp = arr[i][j];
				arr[i][j] = arr[j][i];
				arr[j][i] = temp;
			}
		}

// reverse across the mid row 
		for(int r = 0; r < n/2; r++){
			for(int c = 0; c < n; c++){
				int temp = arr[r][c];
				arr[r][c] = arr[n - 1 - r][c];
				arr[n - 1 - r][c] = temp;
			}
		}
	}
}
