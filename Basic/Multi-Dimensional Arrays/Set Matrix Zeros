Problem - 
For a 'N' X 'M' matrix, if an element is zero then set its corresponding entire row and column to 0s and return the matrix. Task has to be perform inplace only, no extra space to be used.

Example -

Input: 2 3
7 19 3
4 21 0
Output:
7 19 0
0 0 0

Input: 4 2
1 0
2 7
3 0
4 8
Output:
0 0
2 0
0 0
4 0
---------------------------------------------------------------------------------------------------------------------------------------------------------------------

Naive Approach - (Time - O(n*m*(n+m)), Space - O(n*m))

import java.io.*;
import java.util.* ;

public class Solution {
    public static void setZeros(int matrix[][]) {
        // Write your code here..
        int n = matrix.length;
        int m = matrix[0].length;

        boolean[][] isZero = new boolean[n][m];

          for(int i = 0; i < n; i++){
            for(int j = 0; j < m; j++){
                if(matrix[i][j] == 0){
                    isZero[i][j] = true;
                }
            }
        }

        for(int i = 0; i < n; i++){
            for(int j = 0; j < m; j++){
                if(isZero[i][j]){
                    
                    // for top and down movements
                    for(int k = 0; k < n; k++){
                          matrix[k][j] = 0;
                    }

                    for(int u = 0; u < m; u++){
                          matrix[i][u] = 0;
                    }
                }
            }
        }
    }
}
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Better Approach - (Time - O(n*m), Space - O(n + m))

import java.io.*;
import java.util.* ;

public class Solution {
    public static void setZeros(int matrix[][]) {
        // Write your code here..
        int n = matrix.length;
        int m = matrix[0].length;

        HashSet<Integer> rows = new HashSet<>();
        HashSet<Integer> cols = new HashSet<>();

        for(int i = 0; i < n; i++){
            for(int j = 0; j < m; j++){
                if(matrix[i][j] == 0){
                    rows.add(i);
                    cols.add(j);
                }
            }
        }

        for(int r : rows){
            for(int c = 0; c < m; c++){
                matrix[r][c] = 0;
            }
        }

        for(int c : cols){
            for(int r = 0; r < n; r++){
                matrix[r][c] = 0;
            }
        }
    }
}
------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Optimal Approach -(Time - O(n*m), Space - O(1))

class Solution {
    public void setZeroes(int[][] matrix) {
        int n = matrix.length;
        int m = matrix[0].length;

        boolean firstCol = false, firstRow = false;

        for(int i = 0; i < n; i++){
            if(matrix[i][0] == 0){
                firstCol = true;
                break;
            }
        } 

        for(int j = 0; j < m; j++){
            if(matrix[0][j] == 0){
                firstRow = true;
                break;
            }
        } 

        for(int i = 1; i < n; i++){
            for(int j = 1; j < m; j++){
                if(matrix[i][j] == 0){
                    matrix[i][0] = matrix[0][j] = 0;
                }
            }
        }

        for(int i = 1; i < n; i++){
            for(int j = 1; j < m; j++){
                if(matrix[i][0] == 0 || matrix[0][j] == 0){
                    matrix[i][j] = 0;
                }
            }
        }
    
        if(firstCol)
        for(int i = 0; i < n; i++){
            matrix[i][0] = 0;
        }

        if(firstRow)
        for(int j = 0; j < m; j++){
            matrix[0][j] = 0;
        }
    }
}
