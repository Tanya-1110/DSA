Problem - 
For a 'N' X 'M' matrix, if an element is zero then set its corresponding entire row and column to 0s and return the matrix. Task has to be perform inplace only, no extra space to be used.

Example -

Input: 2 3
7 19 3
4 21 0
Output:
7 19 0
0 0 0

Input: 4 2
1 0
2 7
3 0
4 8
Output:
0 0
2 0
0 0
4 0

There are 3 approaches to solve. Mentioned below.
---------------------------------------------------------------------------------------------------------------------------------------------------------------------

Naive Approach - (Time - O(n*m*(n+m)), Space - O(n*m))

Intution - Best explained in copy.

import java.io.*;
import java.util.* ;

public class Solution {
    public static void setZeros(int matrix[][]) {
        // Write your code here..
        int n = matrix.length;
        int m = matrix[0].length;

        boolean[][] isZero = new boolean[n][m];

          for(int i = 0; i < n; i++){
            for(int j = 0; j < m; j++){
                if(matrix[i][j] == 0){
                    isZero[i][j] = true;
                }
            }
        }

        for(int i = 0; i < n; i++){
            for(int j = 0; j < m; j++){
                if(isZero[i][j]){
                    
                    // for top and down movements
                    for(int k = 0; k < n; k++){
                          matrix[k][j] = 0;
                    }

                    // for left and right movements
                    for(int u = 0; u < m; u++){
                          matrix[i][u] = 0;
                    }
                }
            }
        }
    }
}
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Better Approach - (Time - O(n*m), Space - O(n + m))

Intution - We have created hashset to reduce space complexity. Explained in copy.

import java.io.*;
import java.util.* ;

public class Solution {
    public static void setZeros(int matrix[][]) {
        // Write your code here..
        int n = matrix.length;
        int m = matrix[0].length;

        HashSet<Integer> rows = new HashSet<>();
        HashSet<Integer> cols = new HashSet<>();

        for(int i = 0; i < n; i++){
            for(int j = 0; j < m; j++){
                if(matrix[i][j] == 0){
                    rows.add(i);
                    cols.add(j);
                }
            }
        }

        for(int r : rows){
            for(int c = 0; c < m; c++){
                matrix[r][c] = 0;
            }
        }

        for(int c : cols){
            for(int r = 0; r < n; r++){
                matrix[r][c] = 0;
            }
        }
    }
}
------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Optimal Approach -(Time - O(n*m), Space - O(1))

Intution - Explained in copy.

class Solution {
    public void setZeroes(int[][] matrix) {
        int n = matrix.length;
        int m = matrix[0].length;

        boolean firstCol = false, firstRow = false;

        // If for any particular row, first column becomes zero then as per question entire first Column should be turn to 0.
        for(int i = 0; i < n; i++){
            if(matrix[i][0] == 0){
                firstCol = true;
                break;
            }
        } 

        // If for any particular column, first roq becomes zero then as per question entire first row should be turn to 0.
        for(int j = 0; j < m; j++){
            if(matrix[0][j] == 0){
                firstRow = true;
                break;
            }
        } 

        // As by previous iterations we would have decided 0 row and 0 column, so here starting from 1 for both (row and column) till n and m.
        // If found element is 0, turn corresponding elements's first row and first column to zero.
        // It is just like informing of any found 0 element in the remaining(except first row and first column) matrix to first row and first column of the matrix.
        for(int i = 1; i < n; i++){
            for(int j = 1; j < m; j++){
                if(matrix[i][j] == 0){
                    matrix[i][0] = matrix[0][j] = 0;
                }
            }
        }

        // We are checking for the element of the matrix,if either its first row or first column is zero or not if it is anyhow, then that particular element needs to be 0. So turn that element to 0.
        // These loop will turn remaining(except first row and first column) matrix to the reuired output. Now just first row and first column are required to turn to 0 entirely if it has even single 0 in it. 
        for(int i = 1; i < n; i++){
            for(int j = 1; j < m; j++){
                if(matrix[i][0] == 0 || matrix[0][j] == 0){
                    matrix[i][j] = 0;
                }
            }
        }

        // If firstColumn is true, then turn entire first column to 0. 
        if(firstCol)
        for(int i = 0; i < n; i++){
            matrix[i][0] = 0;
        }

        // If firstRow is true, then turn entire first row to 0. 
        if(firstRow)
        for(int j = 0; j < m; j++){
            matrix[0][j] = 0;
        }
    }
}
