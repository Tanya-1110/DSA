Problem-
Calculate the sum of all 1s that are immediate to the 0s in the binary matrix (Binary Matrix has only 1s and 0s in it) i.e., calculate sum of all 1s surrounding to single 0.

Example-

Input: 2 2 
1 0
0 1
Output: 4

Input: 2 3
0 0 0
0 0 0
Output: 0

There is 1 approach to sove. Mentioned below.
---------------------------------------------------------------------------------------------------------------------------------
Optimal Approach - (Time - (n*m), Space - O(1))

Intution - This problem solves the basics of moving up-down and left-right in the matrix efficiently. Diagram explained in copy.


import java.util.* ;
import java.io.*; 
import java.util.ArrayList;

public class Solution {

	public static Integer coverageOfMatrix(ArrayList<ArrayList<Integer>> mat) {

		// Write your code here.
		int n = mat.size();
		int m = mat.get(0).size();
		int sum = 0;

		for(int i = 0; i < n; i++){
			for(int j = 0; j < m; j++){
				if(mat.get(i).get(j) == 0){
					// 'i' is for traversal in a column (top element) 
					if(i > 0 && mat.get(i-1).get(j) == 1)
				       sum++;
					// 'i' is for traversal in a column (bottom element)
				    if(i < n - 1 && mat.get(i+1).get(j) == 1)
				       sum++;
				    // 'j' is for traversal in a row (left element)
				    if(j > 0 && mat.get(i).get(j-1) == 1)
				       sum++;
			        // 'j' is for traversal in a row (right element)
				    if(j < m - 1 && mat.get(i).get(j+1) == 1) 
					   sum++;
				}
				        
			}
		}
		return sum;
	}
}
