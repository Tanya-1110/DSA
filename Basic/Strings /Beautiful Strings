Problem -
Beautiful string is the string in which every element is in the form of alternating 0s and 1s. Question is to find the minimum number of changes done in order to turn given string into a beautiful string.

Example-

Input: 2
0000
1010
01011
1001

Output: 
2
0
1
2

There is 1 approach to solve. Mentioned below:
----------------------------------------------------------------------------------------------------------------------------------------------------

Optimal Approach - (Time - O(n), Space - O(1))
Here, n is the length of the string.

Intution - String can be beautiful either by 010101 or 101010 and we have used to 2 variables x and y to check count of these 2 strings. Best explained in copy.

public class Solution {
    public static int makeBeautiful(String str) {

 	int x = 0, y = 0;
        for(int i = 0; i< str.length(); i++){
            if(i%2 == 0){
                if(str.charAt(i) == '0'){
                    x++;
                }else{
                    y++;
                }
            }else{
                if(str.charAt(i) == '0'){
                    y++;
                }else{
                    x++;
                }
            }
        }
        return Math.min(x, y);
    }
}
