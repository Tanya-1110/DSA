Problem - 
A number is given in the form of string. Our task is to find pallindrome which is strictly greater than the given number. 
Note - Given number can be a pallindrome or may be not so check for both the conditions.

Example -

Input: 4
1221   <-------pallindrome number
Output: 1331

Input: 3
999 <---------- number consist of all 9
Output: 1001

Input: 7
3298934 <--------- Non-Pallindrome number
Output: 3299923

There are 2 approaches to solve it. Mentioned below.

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Naive Approach - (Time - O(n^2), Space - O(1))

Intution - If the given number is not pallindrome, we are adding 1 to the number and will check it again for pallindromcity till it becomes a pallindromic number.  

import java.io.*;

class GFG
{
	static int isPalindrome(int num)
	{
		int n, k, rev = 0;
		n = num;

		while (num != 0) {
			k = num % 10;
			rev = (rev * 10) + k;
			num = num / 10;
		}

		if (n == rev) {
			return 1;
		}
		else {
			return 0;
		}
	}

	public static void main(String[] args)
	{
		int num = 9687;
	
		// If number is not Palindrome we go to the next
		// number using while loop
		while (isPalindrome(num) == 0) {
			num = num + 1;
		}
		System.out.print("Next Palindrome :");
		System.out.print(num);
	}
}
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Optimal Approach - (Time - O(n), Space - O(1))

Intution - Best Explained in copy.

import java.util.* ;
import java.io.*; 
public class Solution {
	public static String nextLargestPalindrome(String number, int n) {
		// Write your code here.
		StringBuilder sb = new StringBuilder();
		
		if(isAll9(number, n)){
			
			sb.append('1');
			for(int i=0; i<n-1; i++) 
			    sb.append('0');
			sb.append('1');
			
			return sb.toString();
		}else{
			return mainfun(number, n);	
		}
	}
	
	public static boolean isAll9(String number, int n){
		
		for(int i = 0; i < n; i++){
			if(number.charAt(i)!='9') 
			   return false;
		}
		
		return true;
	}
	
	public static int[] getArray(String number, int n){
		
		int[] arr = new int[n];
		
		for(int i = 0; i < n; i++){
			arr[i] = number.charAt(i) - '0';
		}
		
		return arr;
	}
	
	public static String mainfun(String number, int n){
		
		int mid = n / 2;
		int i = mid - 1;
		int j = (n % 2 == 0) ? mid : mid + 1;
		
		boolean leftsmaller = false;
		int[] nums = getArray(number, n);
		
		// Step 1 - we will ignore all the digits if they are same on both left and right side.
		while(i >= 0 && nums[i] == nums[j]){
			i--; j++;
		}

		// [Case-1(i < 0) and Case-2.2(left digit < right digit)]
		if(i < 0 || nums[i] < nums[j]) 
		    leftsmaller = true;
		
		// Copy mirror of left to right [Case - 2.1]
		while(i>=0){
			nums[j++] = nums[i--];
		}
		
		// [Case-1 and Case-2.2]
		if(leftsmaller){
			int carry = 1;
			
			//odd length (we have to care of middle element in odd length but in even length mid and j both are same so,mid can be handled easily)
			if(n % 2 == 1){ 
	
				nums[mid] += 1;
				carry = nums[mid] / 10;
				nums[mid] %= 10;
			}
			
			// work for both odd and even length
			i = mid - 1;
			j = (n % 2 == 0) ? mid : mid + 1;
			
			while(i >= 0 && carry > 0){
				nums[i] = nums[i] + carry;
				carry = nums[i] / 10;
				nums[i] %= 10;
				nums[j] = nums[i];
				i--;
				j++;
			}
		}
		
		StringBuilder sb = new StringBuilder();
		
		for(int p=0; p<n; p++)
			sb.append(nums[p]);
			
		return sb.toString();
	}
}



