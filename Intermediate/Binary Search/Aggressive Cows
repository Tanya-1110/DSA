Problem -
    You are given an array ‘arr’ of size ‘n’ which denotes the position of stalls.
    You are also given an integer ‘k’ which denotes the number of aggressive cows.
    You are given the task of assigning stalls to ‘k’ cows such that the minimum distance between any two of them is the maximum possible.
    Find the maximum possible minimum distance.

Example -
Input: N = 6, k = 4, arr[] = {0,3,4,7,10,9}
Output: 3, The maximum possible minimum distance between any two cows will be 3 when 4 cows are placed at positions {0, 3, 7, 10}. Here the distances between cows are 3, 4, and 3 respectively. 
           We cannot make the minimum distance greater than 3 in any ways.

Input: N = 5, k = 2, arr[] = {4,2,1,3,6}
Output: 5, The maximum possible minimum distance between any two cows will be 5 when 2 cows are placed at positions {1, 6}. 

There are 2 approaches to solve. Mentioned below.
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Brute Approach - 

Intution - The extremely naive approach is to check all possible distances from 1 to max(stalls[])-min(stalls[]). The maximum distance for which the function canWePlace() returns true, will be our answer.
Algorithm:
. First, we will sort the given stalls[] array.
. We will use a loop(say i) to check all possible distances.
. Next, inside the loop, we will send each distance, i, to the function canWePlace() function to check if it is possible to place the cows.
. We will return (i-1), where i is the minimum distance for which the function canWePlace() returns false. Because (i-1) is the maximum distance for which we can place all the cows and for the distances >= i, it becomes impossible.

Finally, if we are outside the loop, we can conclude the minimum possible distance should be max(stalls[])-min(stalls[]). And we will return this value.

import java.util.*;

public class tUf {
    public static boolean canWePlace(int[] stalls, int dist, int cows) {
        int n = stalls.length; //size of array
        int cntCows = 1; //no. of cows placed
        int last = stalls[0]; //position of last placed cow.
        for (int i = 1; i < n; i++) {
            if (stalls[i] - last >= dist) {
                cntCows++; //place next cow.
                last = stalls[i]; //update the last location.
            }
            if (cntCows >= cows) return true;
        }
        return false;
    }
    public static int aggressiveCows(int[] stalls, int k) {
        int n = stalls.length; //size of array
        //sort the stalls[]:
        Arrays.sort(stalls);

        int limit = stalls[n - 1] - stalls[0];
        for (int i = 1; i <= limit; i++) {
            if (canWePlace(stalls, i, k) == false) {
                return (i - 1);
            }
        }
        return limit;
    }
    public static void main(String[] args) {
        int[] stalls = {0, 3, 4, 7, 10, 9};
        int k = 4;
        int ans = aggressiveCows(stalls, k);
        System.out.println("The maximum possible minimum distance is: " + ans);
    }
}
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Optimal Approach - 
BINARY SEARCH

Intution -

import java.util.*;

public class tUf {
    public static boolean canWePlace(int[] stalls, int dist, int cows) {
        int n = stalls.length; //size of array
        int cntCows = 1; //no. of cows placed
        int last = stalls[0]; //position of last placed cow.
        for (int i = 1; i < n; i++) {
            if (stalls[i] - last >= dist) {
                cntCows++; //place next cow.
                last = stalls[i]; //update the last location.
            }
            if (cntCows >= cows) return true;
        }
        return false;
    }
    public static int aggressiveCows(int[] stalls, int k) {
        int n = stalls.length; //size of array
        //sort the stalls[]:
        Arrays.sort(stalls);

        int low = 1, high = stalls[n - 1] - stalls[0];
        //apply binary search:
        while (low <= high) {
            int mid = (low + high) / 2;
            if (canWePlace(stalls, mid, k) == true) {
                low = mid + 1;
            } else high = mid - 1;
        }
        return high;
    }
    public static void main(String[] args) {
        int[] stalls = {0, 3, 4, 7, 10, 9};
        int k = 4;
        int ans = aggressiveCows(stalls, k);
        System.out.println("The maximum possible minimum distance is: " + ans);
    }
}
