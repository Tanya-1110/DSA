Problem -  
Given a row-wise sorted (i.e., every row is sorted individually in the matrix in ascending order) matrix of size r*c, where r is no. of rows and c is no. of columns, find the median in the given matrix.
Median of the matrix can be calculated when all the elements of the matrix are arranged in linear manner in ascending order, then return the median of the linear array. 
Median is the middle element of the linear array when elements of array are arranged in ascending order.
Assume â€“ r*c is odd

Example - 
Input: r = 3 , c = 3
1 4 9 
2 5 6
3 8 7
Output: 5, If we find the linear sorted array, the array becomes 1 2 3 4 5 6 7 8 9. So, median = 5

Input: r = 3 , c = 3
1 3 8
2 3 4
1 2 5
Output: 3, If we find the linear sorted array, the array becomes 1 1 2 2 3 3 4 5 8. So, median = 3 

There are 2 approaches to solve. Mentioned below.
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Brute Approach -  
   'N' is the number of rows and 'M' is the number of columns in the given matrix.

   Time Complexity : O(N * M * log(N * M))
     For matrix traversal TC = O(N X M)
     For Sorting array of length (N X M) TC = O(N X M)log(N X M) as sorting happens in O(nlogn).
     TC = O(N X M) + O(N X M)log(N X M) = O(N X M)log(N X M)

   Space Complexity : O(N * M) as a linear array of size (N X M) is created to hold matrix elements.

Intution - The approach is very simple, just fill all elements in a linear array and sort the array using the sort function, and then find the middle value (Median). 

import java.util.ArrayList;
import java.util.Arrays;

public class Solution
{
	public static int getMedian(ArrayList<ArrayList<Integer>> matrix)
	{
		  int row = matrix.size();
		  int col = matrix.get(0).size();

		  int[] median = new int[row * col];
      int index = 0;
      
      for (int i = 0; i < row; i++) {
          for (int j = 0; j < col; j++) {
              median[index] = matrix.get(i).get(j);
              index++;
          }
       }

      Arrays.sort(median);

      return median[(row * col) / 2];
	}
}
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Optimal Approach - 
NESTED BINARY SEARCH

    Time Complexity : O(N * log(M) * log(MAX - MIN) )
    Here, after every thing TC = O(N * log(M)) explained in copy.
    Space Complexity : O(1) as no extra space is used.

    Where 'N' is the number of rows,
    and 'M' is the number of columns in the given matrix,
    and 'MAX' and 'MIN' are the minimum and maximum element of the matrix, respectively. By just traversing the first column, we find the minimum element and by just 
    traversing the last column, we find the maximum element.

Intution - Explained in copy.

public class Main {
  public static int countSmallerThanMid(int[] A, int mid, int n) {
    int l = 0, h = n - 1;
    while (l <= h) {
      int md = (l + h) / 2;
      if (A[md] <= mid) {
        l = md + 1;
      } else {
        h = md - 1;
      }
    }
    return l;
  }
  public static int findMedian(int[][] A, int row, int col) {
    int low = 1;
    int high = 1000000000;
    int n = row;
    int m = col;
    while (low <= high) {
      int mid = (low + high) / 2;
      int cnt = 0;
      for (int i = 0; i < n; i++) {
        cnt += countSmallerThanMid(A[i], mid, col);
      }
      if (cnt <= (n * m) / 2)
        low = mid + 1;
      else
        high = mid - 1;
    }
    return low;
  }
  public static void main(String args[]) {
    int row = 3, col = 5;
    int[][] arr = {{1, 2, 6, 6, 10},
                   {2, 4, 4, 5, 7},
                   {2, 5, 5, 6, 6}};
    System.out.println("The median of the row-wise sorted matrix is: "+
    findMedian(arr, row, col));
  }
}
