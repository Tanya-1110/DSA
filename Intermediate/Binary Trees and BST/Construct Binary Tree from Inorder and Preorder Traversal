Problem - You have been given the preorder and inorder traversal of a binary tree. Your task is to construct a binary tree using the given inorder and preorder traversals.
Note: You may assume that duplicates do not exist in the given traversals.

Example -
Input: 5
1 2 4 7 3  (PREORDER)
4 2 7 1 3  (INORDER)
Output: 1 2 3 4 7

Input: 2
1 2
2 1
Output: 1 2

There are 2 approaches to solve. 
----------------------------------------------------------------------------------------------------------------------------------------------------------------------
USING for Loop for searching index with corresponding rootNode of tree

Time - O(N^2), Where ‘N’ is the number of nodes in the given binary tree. Since we are constructing the tree recursively and each step we are iterating through the 
               inorder sequence to find the index. There will be an ‘N’ recursive call, one for each node, and then a search in an inorder sequence of ‘N’ length. 
               So, the overall time complexity will be O(N ^ 2).

Space - O(N), Since we are doing a recursive tree traversal and in the worst case (Skewed Trees), all nodes of the given tree can be stored in the call stack. So 
              the overall space complexity will be O(N).


Intution - The basic idea of this approach is to build the tree recursively by utilizing the property of preorder and inorder traversal of a binary tree. Consider a
           recursive function “constructTree” which takes five arguments: “inStart”, “inEnd”, “pIndex”, “inorder”, “preorder”. Here “inorder” and “preorder” as the 
           inorder sequence and preorder sequence of the binary tree respectively. And, “inStart” and “inEnd” denote the starting and ending index of the inorder 
           sequence of the given subtree and “pIndex” represents the index of the first element of the preorder sequence of the given subtree. The node at index 
           “pIndex” in the preorder traversal will be the root node of the binary tree. The idea here is to find the index of the root node in the inorder traversal
            because that index will divide the inorder traversal into two parts. For this, consider “inIndex” is equal to “inStart”. Then iterate over the inorder 
            from “inStart” to “inEnd”. As we find the index of the root node in inorder, store it in “inIndex”. Now, the node from index “inStart” to “inIndex” - 1 
        are the inorder sequence of the left subtree of the root node and the node from index “inIndex” + 1 to “inEnd” are the inorder sequence of the right subtree.

Now, the problem is reduced to constructing the left and right subtree and then linking it to the root node. We can follow the same procedure and build the left and
right subtree recursively.


public class Solution {

    // Constructs the subtree and returns the root node.
    private static TreeNode constructTree(int inStart, int inEnd, int[] pIndex, int[] inorder, int[] preorder) {
        if (inStart > inEnd) {
            // Subtree is empty.
            return null;
        }

        // Get root node value from preorder sequence.
        int rootNode = preorder[pIndex[0]];

        // Increment the index denoting the first element of preorder traversal.
        pIndex[0] = pIndex[0] + 1;

        // Create the root node with "rootNode" value.
        TreeNode root = new TreeNode(rootNode);

        if (inStart == inEnd) {
            // There is a single node in the given subtree.
            return root;
        } else {

            // Get the index of root node from the inorder sequence.
            int inIndex = -1;

            for (int i = inStart; i <= inEnd; i++) {
                if (rootNode == inorder[i]) {
                    // Root node value found.
                    inIndex = i;
                    break;
                }
            }

            // Recur for the left subtree.
            TreeNode leftChild = constructTree(inStart, inIndex - 1, pIndex, inorder, preorder);

            // Recur for the right subtree.
            TreeNode rightChild = constructTree(inIndex + 1, inEnd, pIndex, inorder, preorder);

            // Link the left and right child to the root node.
            root.left = leftChild;
            root.right = rightChild;

            return root;
        }
    }

    public static TreeNode buildBinaryTree(int[] inorder, int[] preorder) {

        // Index of the first element of the preorder sequence
        int[] pIndex = {0};

        return constructTree(0, inorder.length - 1, pIndex, inorder, preorder);
    }
}
--------------------------------------------------------------------------------------------------------------------------------------------------------------------
USING HASHMAP APPROACH 

Time - O(N), where N is number of nodes in binary tree. Since we are constructing the tree recursively, there will be  ‘N’ recursive calls, one for each node, and 
             then a search is performed using HashMap, which takes O(1) on average. So, the overall time complexity will be O(N).
Space - O(N), Since we are using the HashMap to store the index of the inorder sequence, which takes O(N) space for ‘N’ elements, also, we are doing a recursive 
              tree traversal, and in the worst case (Skewed Trees), all nodes of the given tree can be stored in the call stack. So the overall space complexity 
              will be O(N).

Intution - The basic idea of this approach is to use HashMap to store a key, value pair of <nodeValue, index> of the inorder sequence. Since we are searching the 
           index of the root node in the inorder sequence in each recursive call, we can optimize it from O(N) to O(1) using HashMap. 
       
            <REST OF THE INTUTION IS SAME AS OF ABOVE MENTIONED NAIVE APPROACH>

import java.util.HashMap;
import java.util.Map;
public class Solution {

    // Constructs the subtree and returns the root node.
    private static TreeNode constructTree(int inStart, int inEnd, int[] pIndex, Map<Integer, Integer> inorderIndex, int[] inorder, int[] preorder) {
        if (inStart > inEnd) {
            // Subtree is empty.
            return null;
        }

        // Get root node value from preorder sequence.
        int rootNode = preorder[pIndex[0]];

        // Increment the index denoting the first element of preorder traversal.
        pIndex[0] = pIndex[0] + 1;

        // Create the root node with "rootNode" value.
        TreeNode root = new TreeNode(rootNode);

        if (inStart == inEnd) {
            // There is a single node in the given subtree.
            return root;
        } else {

            // Get the index of root node from the inorder sequence.
            int inIndex = inorderIndex.get(root.data);

            // Recur for the left subtree.
            TreeNode leftChild = constructTree(inStart, inIndex - 1, pIndex, inorderIndex, inorder, preorder);

            // Recur for the right subtree.
            TreeNode rightChild = constructTree(inIndex + 1, inEnd, pIndex, inorderIndex, inorder, preorder);

            // Link the left and right child to the root node.
            root.left = leftChild;
            root.right = rightChild;

            return root;
        }
    }

    public static TreeNode buildBinaryTree(int[] inorder, int[] preorder) {

        // A HashMap to store the <nodeValue, index> pair of inorder sequence.
        Map<Integer, Integer> inorderIndex = new HashMap<>();

        for (int i = 0; i < inorder.length; i++) {
            // Storing key, value pair
            inorderIndex.put(inorder[i], i);
        }

        // Index of the first element of the preorder sequence
        int[] pIndex = {0};

        return constructTree(0, inorder.length - 1, pIndex, inorderIndex, inorder, preorder);
    }
}
