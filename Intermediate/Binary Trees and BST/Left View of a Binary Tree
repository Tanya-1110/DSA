Problem - You have been given a binary tree of integers. You are supposed to find the left view of the binary tree. The left view of a binary tree is the set of all
          nodes that are visible when the binary tree is viewed from the left side.

Example -
Input: 2 8 7 -1 5 -1 -1 1 -1 -1 -1
Output: 2 8 5 1

Input: 9 6 3 -1 -1 4 8 -1 -1 -1 -1 
Output: 9 6 4

There is 1 approach to solve.
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
Time - O(N), As we are traversering for every node in the tree for only once.
Space - O(N), in wost case our binary tree can be left skewed, so all elements will be visible from the left side so recursion stack will consume O(N) space.

Intution - Every level can have only 1 element to be viewed from left side so if left traversal has got 1 eleemt already then for its right traversal we won't be 
           getting element thus the condition if (lvl == que.size) means 1 element has already been added for that level.

import java.util.ArrayList;

public class Solution {
    public static void solve(ArrayList<Integer> ans, TreeNode<Integer> root, int lvl) {

        if (root == null)
            return;

        if(lvl == ans.size()){
            ans.add(root.data);
        }
        
        solve(ans, root.left, lvl+1);
        solve(ans, root.right, lvl+1);
    }

    public static ArrayList<Integer> getLeftView(TreeNode<Integer> root) {

        ArrayList<Integer> ans = new ArrayList<>();
        solve(ans, root, 0);
        return ans;
    }
}


# Right view question - LEETCODE - 199 
