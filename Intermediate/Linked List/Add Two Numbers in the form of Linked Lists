Problem -
You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order, and each of their nodes contains a single digit. 
Add the two numbers and return the sum as a linked list.
You may assume the two numbers do not contain any leading zero, except the number 0 itself.

Example - 
Input: 1 2 3
4 5 6
Output: 5 7 9 
Explanation - 'num1' represents the number 321 and 'num2' represents 654. Their sum is 975.
 
Input: 2
9 9
Output: 1 0 1
Explanation - 'num1' represents 2 and 'num2' represents 99. Their sum is 101.

There are approaches to solve. Mentioned below.
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
ITERATIVE APPROACH -

 Time Complexity - O(M + N), We are traversing both the linked lists completely and it takes O(L) (where L is the number of nodes in the list) time to traverse each list.
 Space Complexity - O(Max(M, N)), Extra space is required for storing the sum list. The length of the sum list is Max('m', 'n') + 1.

  Where 'M' and 'N' are the number of nodes in the two linked lists.

Intution - The Intuition is to iterate through two linked lists representing non-negative integers in reverse order, starting from the least significant digit. It performs 
           digit-wise addition along with a carry value and constructs a new linked list to represent the sum. The process continues until both input lists and the carry 
           value are exhausted. The resulting linked list represents the sum of the input numbers in the correct order.

1. Create a placeholder node called dummyHead with a value of 0. This node will hold the resulting linked list.
2. Initialize a pointer called tail and set it to dummyHead. This pointer will keep track of the last node in the result list.
3. Initialize a variable called carry to 0. This variable will store the carry value during addition.
4. Start a loop that continues until there are no more digits in both input lists (l1 and l2) and there is no remaining carry value.
5. Inside the loop:
   . Check if there is a digit in the current node of l1. If it exists, assign its value to a variable called digit1. Otherwise, set digit1 to 0.
   . Check if there is a digit in the current node of l2. If it exists, assign its value to a variable called digit2. Otherwise, set digit2 to 0.
   . Add the current digits from l1 and l2, along with the carry value from the previous iteration, and store the sum in a variable called sum.
   . Calculate the unit digit of sum by taking the modulus (%) of sum by 10. This digit will be placed in a new node for the result.
   . Update the carry variable by dividing sum by 10 and taking the integer division (/) part. This gives us the carry value for the next iteration.
   . Create a new node with the calculated digit as its value.
   . Attach the new node to the tail node of the result list.
   . Move the tail pointer to the newly added node.
   . Move to the next nodes in both l1 and l2, if they exist. If either list is exhausted, set the corresponding pointer to nullptr.
6. After the loop, obtain the actual result list by skipping the dummyHead node.
7. Delete the dummyHead node.
8. Return the resulting list.


import java.util.* ;
import java.io.*; 
/****************************************************************

    Following is the class structure of the Node class:

    class LinkedListNode {
        int data;
        LinkedListNode next;
        
        public LinkedListNode(int data) {
            this.data = data;
        }
    }

*****************************************************************/


public class Solution {
    static LinkedListNode addTwoNumbers(LinkedListNode head1, LinkedListNode head2) {
        
        LinkedListNode dummy = new LinkedListNode(0);
        LinkedListNode tail = dummy;
        int carry = 0;

        while(head1 != null || head2 != null || carry != 0){
            int digit1 = (head1 != null) ? head1.data : 0;
            int digit2 = (head2 != null) ? head2.data : 0;

            int sum = digit1 + digit2 + carry;
            int digit = sum % 10;
            carry = sum / 10;

            LinkedListNode newNode = new LinkedListNode(digit);
            tail.next = newNode;
            tail = tail.next;

            head1 = (head1 != null) ? head1.next : null;
            head2 = (head2 != null) ? head2.next : null;

        }

        LinkedListNode result = dummy.next;
        dummy.next = null;
        return result;
    }
}
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
SPACE OPTIMIZED APPROACH -

    Time Complexity - O(M + N), 
    Space Complexity - O(1), 

    Where 'M' and 'N' are the number of nodes in the two linked lists.

Intution - 


public class Solution{

    static LinkedListNode addTwoNumbers(LinkedListNode head1, LinkedListNode head2)
    {
        // 'NODE1' and 'NODE2' point to the current node of the first and second list, respectively.
        LinkedListNode node1 = head1;
        LinkedListNode node2 = head2;

        // 'SUM' and 'CARRY' store the sum and carry generated in the current iteration.
        int sum = 0, carry = 0;

        LinkedListNode prev = new LinkedListNode(-1);

        while (node1 != null && node2 != null)
        {
            // Add the values in the current nodes along with the carry.
            sum = node1.data + node2.data + carry;

            // Store the next node of the sum list in the current node of the first linked list.
            node1.data = sum % 10;

            // Get the new carry.
            carry = sum / 10;

            // Keep track of the previous node.
            prev = node1;

            // Move to the next node
            node1 = node1.next;
            node2 = node2.next;
        }

        // If there are remaining digits in any one of the lists, add them to the sum list.
        if (node1 != null || node2 != null)
        {
            if (node2 != null)
            {
                prev.next = node2;
            }

            node1 = prev.next;

            while (node1 != null)
            {
                // Add the values in the current node along with the carry.
                sum = node1.data + carry;

                // Store the next node of the sum list in the current node of the first linked list.
                node1.data = sum % 10;

                // Get the new carry.
                carry = sum / 10;

                // Keep track of the previous node.
                prev = node1;

                // Move to the next node
                node1 = node1.next;
            }
        }

        if (carry > 0)
        {
            // Carry is generated from the last iteration. So, add a new node to the sum list.
            prev.next = new LinkedListNode(carry);
        }

        return head1;
    }
}
