Problem -
You have been given an integer Linked List. After every 'M' nodes, you have to take the sum of the next 'N' nodes and append that sum to the linked list. 
Do this till the end of the linked list and return the head of new linked list.

Example -
Input: 1 2 3 4 5 6 7 8 9 10 11 12 -1
2 3
Output: 1 2 3 4 5 9 6 7 8 9 10 19 11 12
Explanation - For the linked list, the value of 'M' is 3. So we skip the first 3 nodes(1->2->3). The value of 'N' is 2, hence we add the next 2 nodes(4->5). The sum is 9, so 
              we add 9 after node 5. Now repeating the same process again, we skip the next 3 nodes(6->7->8). Now we add the next 2 nodes(9->10), for which the sum is 19. 
              Hence we add 19 to the list after 10. Now while skipping the next 3 nodes we encounter the end of a linked list, hence the updated linked list is our answer.

Input: 5 4 3 7 9 -1
4 3
Output: 5 4 3 7 9 16
Explanation - For the linked list, the value of 'M' is 3. So we skip the first 3 nodes(5->4->3). The value of 'N' is 4 so ideally we should add the next 4 nodes, but there are 
              only two nodes remaining before we encounter the end of the linked list, hence we add those 2 nodes(7->9). The sum is 16, therefore we add 16 to the end of the 
              linked list. Because we have encountered the end of the linked list, the updated linked list is our answer.

There is 1 approach to solve. Mentioned below.
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
ITERATIVE APPROACH - (OPTIMAL APPROACH)

    Time Complexity : O(N), As we are traversing the list till the end.
    Space Complexity : O(1), Constant space is used.

    Where N denotes the length of linked list.

INTUTION - We are just traversing first 'M' till the elements we want to skip, after that we are traversing next 'N' elements to sum simultaneously creating new node to add 
           after 'N' elements. We will repeat this process till either we reach last element or null element.

public class Solution {
    public static Node<Integer> addNodes(Node<Integer> head, int n, int m) {

        if(head == null) 
           return head;

        Node<Integer> temp = head;

        while(temp != null && temp.next != null){
            int count = m-1;

            while(count-- != 0 && temp.next != null){
                temp = temp.next;
            }

            count = n;
            int sum = 0;

            while(count-- != 0 && temp.next != null){
                sum += temp.next.data;
                temp = temp.next;
            }

            if(sum != 0){
                Node<Integer> temp1 = new Node<>(sum);

                if(temp.next != null){
                    temp1.next = temp.next;
                }

                temp.next = temp1;
                temp = temp.next.next;
            }
        }
        return head;
    }
}
