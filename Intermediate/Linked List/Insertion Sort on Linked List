Problem -
You are given an arbitrary linked list consisting of 'N' nodes having integer values. You need to perform insertion sort on the linked list and print the final list in sorted order.
In other words, you are given a singly linked list, you need to perform insertion sort on it.
Insertion Sort is a sorting algorithm that removes one element from the input data, finds the location it belongs within the sorted list and inserts it there. It repeats until no input elements remain.

Example - 
Input: 4 2 1 3 -1
Output: 1 2 3 4 

Input: 19 3 6 1 5 -1
Output: 1 3 5 6 19

There is 1 approach to solve. Mentioned below.
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Approach 

Time Complexity - O(N^2) , where N is length of linked list. We are using 2 while loops, outer loop is running for whole length and inner loop is running everytime from dummy node(dummy node is fixed at the beginning).
Space Complexity - O(1), only 1 extra dummy node is created.

Intution - Explained in copy.

public class Solution {

    public static Node insertionSortLL(Node head) {

        Node dummy = new Node(100000);

        while (head != null) {

            Node next = head.next;
            Node temp = dummy;

            while (temp.next != null && temp.next.data < head.data) {
                temp = temp.next;
            }

            head.next = temp.next;
            temp.next = head;
            head = next;
        }

        return dummy.next;
    }
}
