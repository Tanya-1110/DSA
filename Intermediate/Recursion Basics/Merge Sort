Problem -
Given an array of size n, sort the array using Merge Sort.

Example -
Input: 7
3 4 1 6 2 5 7
Output: 1 2 3 4 5 6 7

Input: 3
2 1 1
Output: 1 1 2

There is 1 approach to solve. Mentioned below.
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
MERGE SORT - Recursive Approach

Time complexity: O(nlogn) 
Reason: At each step, we divide the whole array, for that logn and we assume n steps are taken to get a sorted array, so overall time complexity will be nlogn.

Space complexity: O(n)  
Reason: We are using a temporary array to store elements in sorted order.
Auxiliary Space Complexity: O(n)


Intution - Merge Sort is a divide and conquers algorithm, it divides the given array into equal parts and then merges the 2 sorted parts. 
There are 2 main functions :

1. merge(): This function is used to merge the 2 halves of the array. It assumes that both parts of the array are sorted and merges both of them.
2. mergeSort(): This function divides the array into 2 parts. low to mid and mid+1 to high where,
      low = leftmost index of the array
      high = rightmost index of the array
      mid = Middle index of the array 
3. We recursively split the array, and go from top-down until all sub-arrays size becomes 1.


public class Solution {
	
	public static void mS(int arr[],int start,int end){
		  if(start >= end){
	       return;
      }
		  int mid = start+(end-start)/2;
		  mS(arr, start, mid);               // Left array
		  mS(arr, mid+1, end);               // right array
		  merge(arr,start,mid,end);          // merging current bifurcated left and right arrays.

	}

	public static void merge(int arr[],int start, int mid,int end){
		int temp[] = new int[end-start+1];
		int i=start;                        // left array start
		int j=mid+1;                        // Right array start
		int k=0;                            // temp array start

		while(i<=mid && j<= end){
			if(arr[i]<arr[j]){
				temp[k]= arr[i];
				i++;
			}else{
				temp[k]=arr[j];
				j++;
			}
			k++;
		}
		while(i<=mid){
				temp[k++]=arr[i++];
		}
		while(j<=end){
			temp[k++]=arr[j++];
		}

		for(k=0,i=start;k<temp.length;k++,i++){
			arr[i]=temp[k];
		}
	}
	public static void printArr(int arr[]){
        for (int i = 0; i < arr.length; i++) {
            System.out.print(arr[i]+" ");
        }
    }
	public static void mergeSort(int[] arr, int n) {
		// Write your code here.
		mS(arr, 0, n-1);
	}
}
