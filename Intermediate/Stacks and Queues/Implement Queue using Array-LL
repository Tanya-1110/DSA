Problem - 
Implement a Queue Data Structure specifically to store integer data using a Singly Linked List or an array. You need to implement the following public functions :
 Constructor: It initializes the data members as required.
1. enqueue(data): This function should take one argument of type integer. It enqueues the element into the queue.
2. dequeue(): It dequeues/removes the element from the front of the queue and in turn, returns the element being dequeued or removed. In case the queue is empty, it returns -1.
3. front(): It returns the element being kept at the front of the queue. In case the queue is empty, it returns -1.
4. isEmpty(): It returns a boolean value indiacting whether a queue is empty or not.

Example -
Input: 7 (No of Operations)
1 17
1 23
1 11
2
2
2
2
Output:
17
23
11
-1

There is 1 approach (each for Array and Linked List). Mentioned below.
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
QUEUE USING ARRAY
    Time Complexity : O(q), enQueue, deQueue, front, isEmpty all of these functions are O(1). Hence the total time complexity will be O(q).
    Space Complexity : O(q), Since we are making an array of size q. Hence the space complexity is O(q).
 
     Where q is the number of queries.

INTUTION - Array is created and 2 pointers to hold front and last(rear) position of the array(as queue). Element is removed from front while added at the end(rear).

import java.util.* ;
import java.io.*; 
public class Queue {

    int[] arr;
    int front, rear;

    // Constructor
    Queue() {
        arr = new int[5000];
        front = 0;
        rear = 0;
    }

    boolean isEmpty() {
        if(front == rear)
           return true;

        return false;   
    }

    void enqueue(int data) {
        if(rear < 5000){
            arr[rear++] = data;
        }
    }

    int dequeue() {
        if(isEmpty())
           return -1;

        int ele = arr[front++];  
        return ele; 
    }

    int front() {
        if(isEmpty())
           return -1;

        return arr[front];  
    }
}
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------
QUEUE USING LINKED LIST 
    Time Complexity : O(q), enQueue, deQueue, front, isEmpty all of these functions are O(1). Hence the total time complexity will be O(q).
    Space Complexity : O(q), Since we are making an array of size q. Hence the space complexity is O(q).
 
     Where q is the number of queries.

INTUTION - We have created a Linked List to add new elements at head through rear end and removed elements from head(front) end.

import java.util.* ;
import java.io.*; 

 class Node{
    int data;
    Node next;
    
    Node(){
        this.data = 0;
        this.next = null;
    }
    
    Node(int data){
        this.data = data;
        this.next = null;
    }
}
public class Queue {

    Node head; // head is acting front.
    Node rear;
    int size;
    

    // Constructor
    Queue() {
        head = new Node();
        rear = head;
        size = 0;
    }

    boolean isEmpty() {
        return size == 0;   
    }

    void enqueue(int data) {
        if(isEmpty()){
            head = new Node(data);
            rear = head;
            size++;
            return;
        }
        Node ele = new Node(data);
        rear.next = ele;
        rear = ele;
        size++;
    }

    int dequeue() {
        if(isEmpty())
          return -1;
          
        int val = head.data;
        head = head.next;
        size--;
        
        return val; 
    }

    int front() {
        if(isEmpty())
          return -1;
          
        return head.data;  
    }
}



