Problem - Implement a Stack Data Structure specifically to store integer data using two Queues. There should be two data members, both being Queues to store 
          the data internally. You may use the inbuilt Queue. Implement the following public functions :
Constructor: It initializes the data members(queues) as required.
1. push(data) : This function should take one argument of type integer. It pushes the element into the stack and returns nothing.
2. pop() : It pops the element from the top of the stack and, in turn, returns the element being popped or deleted. In case the stack is empty, it returns -1.
3. top : It returns the element being kept at the top of the stack. In case the stack is empty, it returns -1.
4. size() : It returns the size of the stack at any given instance of time.
5. isEmpty() : It returns a boolean value indicating whether the stack is empty or not.

Example - 
Input: 6 (No of Operations)
1 13
1 47
4
5
2
3
Output:
2
false
47
13

There are 3 approaches to solve. Mentioned below.
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Approach - 1 MAKING PUSH OPERATION COSTLY
    Time complexity: O(Q*N), For each push operation O(N); O(1) for all other operations. During each push operation, we transfer all the elements of ‘q1’ to ‘q2’.
    Space complexity: O(max(N1, N2))

    where Q is the number of queries, N denotes the maximum number of elements in the queue and
    'N1' and 'N2' denote the size of queues 'q1' and 'q2'.

INTUTION - 
1. This method ensures that every new element entered in the queue ‘q1’ is always at the front.
2. Hence, during pop operation, we just dequeue from ‘q1’.
3. For this, we need another queue ‘q2., which is used to keep every new element to the front of ‘q1’.
4. During push operation :
    Enqueue new element ‘x’ to queue ‘q2’.
    One by one, dequeue everything from ‘q1’ and enqueue to ‘q2’.
    Swap the names of ‘q1’ and ‘q2’.
5. During pop operation :
    Dequeue an element from ‘q1’ and return it.
6. For the size function, return the size of queue ‘q1’ and for the empty function, check if ‘q1’ is empty.

import java.util.LinkedList;
import java.util.Queue;
public class Solution{
    static class Stack {
        public Queue<Integer> q1;
        public Queue<Integer> q2;

        public Stack() {
            this.q1 = new LinkedList<>();
            this.q2 = new LinkedList<>();
        }

        public int getSize() {
            // Return the size of the queue 'q1'.
            return this.q1.size();
        }

        public boolean isEmpty() {
            return this.getSize() == 0;
        }

        public void push(int data) {
            // Enqueue new element to q2.
            this.q2.add(data);

            // Enqueue all the elements of q1 into q2.
            while (this.q1.size() > 0) {
                this.q2.add(this.q1.peek());
                this.q1.poll();
            }

            // Swap q1 and q2.
            Queue<Integer> temp = q1;
            q1 = q2;
            q2 = temp;

        }

        public int pop() {
            // If empty, return -1.
            if (isEmpty()) {
                return -1;
            }
            // Simply dequeue from the queue q1.
            int ans = this.q1.peek();
            this.q1.poll();

            return ans;
        }

        int top() {
            if (isEmpty()) {
                return -1;
            }
            int ans = this.q1.peek();

            return ans;
        }
    }
}
---------------------------------------------------------------------------------------------------------------------------------------------------------------------
Approach - 2 MAKING POP OPERATION COSTLY
    Time complexity: O(Q*N), For each pop operation O(N); O(1) for all other operations. During each pop operation, we transfer all the elements of ‘q1’ to ‘q2’.
    Space complexity: O(max(N1, N2))

    where Q is the number of queries, N denotes the maximum number of elements in the queue and
    'N1' and 'N2' denote the size of queues 'q1' and 'q2'.


INTUTION - q1 is our main queue which will store all the elements and q2 will serve as temporary queue for operations.
1. We will be using two queues, ‘q1’ and ‘q2’.
2. During push operation :
    Enqueue new element  ‘x’ to ‘q1’.
3. During pop operation :
    One by one, dequeue everything except the last element from ‘q1’ and enqueue to ‘q2’.
    Dequeue the last item of ‘q1’, and the dequeued item is the result, store it.
    Swap the names of ‘q1’ and ‘q2’.
    Return the item stored in step 2.
4. For the size function, return the size of queue ‘q1’ and for the empty function, check if ‘q1’ is empty.


import java.util.LinkedList;
import java.util.Queue;
public class Solution{
    static class Stack {
        public Queue<Integer> q1;
        public Queue<Integer> q2;

        public Stack() {
            this.q1 = new LinkedList<>();
            this.q2 = new LinkedList<>();
        }

        public int getSize() {
            // Return the size of the queue 'q1'.
            return this.q1.size();
        }

        public boolean isEmpty() {
            return this.getSize() == 0;
        }

        public void push(int data) {
            // Simply enqueue data to q1.
            this.q1.add(data);

        }

        public int pop() {
            // If empty, return -1.
            if (isEmpty()) {
                return -1;
            }

            // Enqueue all the elements of q1 into q2 except the last one.
            while (this.q1.size() > 1) {
                this.q2.add(this.q1.peek());
                this.q1.poll();
            }

            // Last element of q1 is our answer.
            int ans = this.q1.peek();
            this.q1.poll();

            // Swap q1 and q2.
            Queue<Integer> temp = q1;
            q1 = q2;
            q2 = temp;

            return ans;
        }

        int top() {
            if (isEmpty()) {
                return -1;
            }

            // Enqueue all the elements of q1 into q2 except the last one.
            while (this.q1.size() > 1) {
                this.q2.add(this.q1.peek());
                this.q1.poll();
            }

            // Last element of q1 is our answer.
            int ans = this.q1.peek();
            this.q1.poll();
            // Enqueue the top to q2.
            this.q2.add(ans);

            Queue<Integer> temp = q1;
            q1 = q2;
            q2 = temp;

            return ans;
        }
    }
}
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------
APPROACH - 3 SWAPING TECNHIQUE
	Time complexity: O(Q*N) For each push operation O(N); O(1) for all other operations. During each push operation, we re-transfer all the elements of ‘q1’ back to ‘q1’.
	Space complexity: O(N)

	where Q is the number of queries, N denotes the maximum number of elements in the queue.


INTUTION - 
1. We will be using a single queue ‘q1’.
2. In a push operation, we can calculate the size of the queue ‘q1’.Hence we enqueue new data to the queue.
3. Now suppose before inserting new data size of the queue is ‘x’, Hence we dequeue ‘x’ elements from the queue and push it back again into the same queue.
4. This would push the new element to the front of the queue.
5. During pop and top operation :
   . The element we are searching for is the front of the queue.
   . Hence during pop operation simply access the front of the queue and remove the element.
   . During top operation simply access the front element of the queue.
6. Hence assuming we know the size of the queue at any instance we can solve this problem using a single queue.

import java.util.*;

public class Solution{

    static class Stack{

        Queue<Integer> q;

        public Stack(){
            q = new LinkedList<>();
        }

        public int getSize(){
            return q.size();
        }

        public boolean isEmpty(){
            return q.isEmpty();
        }

        public void push(int element){
            q.add(element);

            for(int i = 0; i < q.size() - 1; i++)
                q.add(q.remove());
        }

        public int pop(){
            if(q.isEmpty())
                return -1;

            return q.remove();
        }

        public int top(){
            if(q.isEmpty())
                return -1;

            return q.peek();
        }
    }
}


