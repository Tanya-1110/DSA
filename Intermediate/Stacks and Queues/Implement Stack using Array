Problem -
Stack is a data structure that follows the LIFO (Last in First out) principle. Design and implement a stack to implement the following functions:
1. Push(num): Push the given number in the stack if the stack is not full.
2. Pop: Remove and print the top element from the stack if present, else print -1.
3. Top: Print the top element of the stack if present, else print -1.
4. isEmpty: Print 1 if the stack is empty, else print 0.
5. isFull: Print 1 if the stack is full, else print 0.

Example -
Input: 2 6  (Here, 2 is size or capacity of the stack and 6 are the number of operations.)
1 1
1 2
2
3
4
5
Output: 
2 
1
0
0

Input: 5 5
1 2
2
2 
1 1
3
Output:
2 
-1
1

There is 1 approach to solve. Mentioned below.
----------------------------------------------------------------------------------------------------------------------------------------------------------------------
APPROACH -
    Time complexity: O(1), We donâ€™t traverse the array in any of the operations. Therefore, the overall time complexity will be O(1).
    Space complexity: O(N), We use extra space to store the elements of the stack. Therefore, the overall space complexity will be O(N).

    Where 'N' is the capacity of the stack.

Intution - We have created an array that performs task of stack just like stack with the help of TOP index which if have value of -1 will mean that stack is empty.


public class Solution {

    static class Stack {

        int arr[];
        int n;
        int top;

     // Constructor for Stack class.
        Stack(int capacity) {
            arr = new int[capacity];
            top = -1;
            n = capacity;
        }

        public void push(int num) {
            if (isFull() == 1)
                return;

            arr[++top] = num;
        }

        public int pop() {
            if (isEmpty() == 1)
                return -1;

            return arr[top--];
        }

        public int top() {
            if (isEmpty() == 1)
                return -1;

            return arr[top];
        }

        public int isEmpty() {
            if (top == -1)
                return 1;
            else
                return 0;
        }

        public int isFull() {
            if (top >= n - 1)
                return 1;
            else
                return 0;
        }
    }
}

