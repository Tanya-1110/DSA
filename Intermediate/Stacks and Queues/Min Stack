Problem -Design a stack that supports push, pop, top, and retrieving the minimum element in constant time.
1. Push(num): Push the given number in the stack.
2. Pop: Remove and return the top element from the stack if present, else return -1.
3. Top: return the top element of the stack if present, else return -1.
4. getMin: Returns minimum element of the stack if present, else return -1.

Example -
Input: 5
1 1
1 2
4
2
3
Output: 1 2 1

There is 1 approach to solve. Mentioned below.
------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Approach -
    Time Complexity: O(N), All of our operations are doing some constant no. of operations and taking O(1). For each of the operations, we will take O(1) time. 
                           Hence the final time complexity will be O(N) for N operations.
    Space Complexity:O(N), We have to store two stacks: “Stack” and “Min”. The size of each of the stacks can be at most N. So each stack will take O(N) space. 
                           So total space required = O(N)+O(N) = O(N).

    Where 'N' is the no. of operations performed.

Intution - The basic idea is to store two stacks. One for regular stack and one for storing prefix minimums of our regular stack. We store values at which our 
           minimum changes so that those values are stored and can be accessed later when we pop elements on top of it. We just return the top value of Min stack 
           whenever we are asked getMin(). The implementation details are depicted in the following algorithm.

Algorithm: 

1. push(num)

. Push num into the regular stack
. If Min stack is empty OR num ≤ top of Min stack - Push num into Min stack
 
2. pop()

. If Min stack is not empty AND top of Min stack = top of the regular stack - Pop top element of Min stack
. If the regular stack is empty, return -1.
. pop the element of the regular stack.
 
3. top()

. If the regular stack is empty - return -1.
. else return peek element of the regular stack.

4. getMin()

. If the min stack is empty, return -1.
. else return peek element of min stack.


import java.util.Stack;

public class Solution {

    static class MinStack {

        Stack<Integer> stack, Min;

        // Constructor
        MinStack() {
            stack = new Stack<Integer>();
            Min = new Stack<Integer>();
        }

        void push(int num) {
            stack.push(num);
            if (Min.isEmpty() || Min.peek() >= num) {
                Min.push(num);
            }
        }

        int pop() {
            if (!Min.isEmpty() && Min.peek() == stack.peek()) 
                Min.pop();

            if (stack.isEmpty()) 
                return -1; 
            
            return stack.pop();
        }

        int top() {
            if (stack.isEmpty()) 
                return -1;
            
            return stack.peek();
        }

        int getMin() {
            if (Min.isEmpty()) 
                return -1;
            
            return Min.peek();
        }
    }
}
